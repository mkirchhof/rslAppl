ID =  5 
[[1]]
[[1]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[4]]$visible
[1] FALSE


[[5]]
[[5]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[5]]$visible
[1] FALSE


[[6]]
[[6]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[6]]$visible
[1] FALSE


[[7]]
[[7]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[7]]$visible
[1] FALSE


[[8]]
[[8]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[8]]$visible
[1] FALSE


[[9]]
[[9]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[9]]$visible
[1] FALSE


[[10]]
[[10]]$value
function (rsl, n, outputClassifiers = TRUE, outputLabels = TRUE, 
    outputRules = TRUE) 
{
    rsl <- .compile(rsl)
    data <- gRain::simulate.grain(rsl$compiledNet, n)
    outputVars <- character(0)
    if (outputClassifiers) 
        outputVars <- c(outputVars, .getAllClassifiers(rsl))
    if (outputLabels) 
        outputVars <- c(outputVars, .getAllLabelNodes(rsl))
    if (outputRules) 
        outputVars <- c(outputVars, .getAllRules(rsl))
    data <- data[, outputVars]
    data <- .colnamesIDtoNames(rsl, data)
    data[] <- lapply(data, as.character)
    return(data)
}

[[10]]$visible
[1] FALSE


Adding rule  stand, step <- st 
Adding rule  gait, step <- wa 
Adding rule  stand <- kn 
Adding rule  stand <- cr 
Adding rule  center, noMotion <- u 
Adding rule  down <- bf 
Adding rule  down <- bs 
Adding rule  up <- os 
Adding rule  up <- oh 
Adding rule  bulky, handy, utility, cart <- re 
Adding rule  bulky, handy, utility, cart <- pi 
Adding rule  bulky, handy, utility, cart <- pl 
Adding rule  bulky, handy, utility, cart <- rl 
Adding rule  bulky, handy, utility, cart <- ca 
Adding rule  utility, cart <- fm 
Adding rule  utility, cart <- sc 
Adding rule  noHand_1 <- id 
Adding rule  rightHand_1, leftHand_1 <- re 
Adding rule  rightHand_1, leftHand_1 <- pi 
Adding rule  rightHand_1, leftHand_1 <- pl 
Adding rule  rightHand_1, leftHand_1 <- rl 
Adding rule  rightHand_1, leftHand_1 <- ca 
Predicting on val...
Preprocessing data...Predicting...
